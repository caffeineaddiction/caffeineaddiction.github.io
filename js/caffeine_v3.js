// Generated by CoffeeScript 1.9.0
(function() {
  var animate, ca, cl, objCaffeine, objCircle, objClock, objLine, objMesh, objPoint, objTransform, renderer, root, stage, stats,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  objPoint = (function() {
    function objPoint(x, y, z) {
      this.x3 = x;
      this.y3 = y;
      this.z3 = z;
      this.x2 = x;
      this.y2 = y;
    }

    objPoint.prototype.transform = function(tf, f) {
      var m, tX3, tY3, tZ3;
      m = tf.matrix;
      tX3 = this.x3 * m[0] + this.y3 * m[4] + this.z3 * m[8] + m[12];
      tY3 = this.x3 * m[1] + this.y3 * m[5] + this.z3 * m[9] + m[13];
      tZ3 = this.x3 * m[2] + this.y3 * m[6] + this.z3 * m[10] + m[14];
      this.x2 = f * tX3 / tZ3;
      return this.y2 = f * tY3 / tZ3;
    };

    return objPoint;

  })();

  objMesh = (function() {
    function objMesh() {
      this.Vertices = [];
      this.z_projection = 10000;
    }

    objMesh.prototype.add_vertex = function(aX, aY, aZ) {
      var tPoint;
      tPoint = new objPoint(aX, aY, aZ);
      this.Vertices.push(tPoint);
      return tPoint;
    };

    objMesh.prototype.update = function(matrix) {
      var tVert, _i, _len, _ref, _results;
      _ref = this.Vertices;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tVert = _ref[_i];
        _results.push(tVert.transform(matrix, this.z_projection));
      }
      return _results;
    };

    return objMesh;

  })();

  objTransform = (function() {
    function objTransform() {
      this.matrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    }

    objTransform.prototype.translate = function(x, y, z) {
      var m;
      m = this.matrix;
      m[12] = x;
      m[13] = y;
      return m[14] = z;
    };

    objTransform.prototype.rotate = function(x, y, z) {
      var cosx, cosy, cosz, m, sinx, siny, sinz;
      m = this.matrix;
      cosx = Math.cos(x);
      sinx = Math.sin(x);
      cosy = Math.cos(y);
      siny = Math.sin(y);
      cosz = Math.cos(z);
      sinz = Math.sin(z);
      m[0] = cosy * cosz + siny * sinx * sinz;
      m[1] = -cosy * sinz + siny * sinx * cosz;
      m[2] = -siny * cosx;
      m[4] = cosx * sinz;
      m[5] = cosx * cosz;
      m[6] = sinx;
      m[8] = siny * cosz - cosy * sinx * sinz;
      m[9] = -siny * sinz - cosy * sinx * cosz;
      return m[10] = cosy * cosx;
    };

    return objTransform;

  })();

  objClock = (function() {
    function objClock() {
      this.tick = 48;
      this.clock = null;
      this.todo = [];
    }

    objClock.prototype.run = function() {
      return this.clock = setInterval(((function(_this) {
        return function() {
          return _this.ticktock();
        };
      })(this)), this.tick);
    };

    objClock.prototype.stop = function() {
      return clearInterval(this.clock);
    };

    objClock.prototype.ticktock = function() {
      var thing, _i, _len, _ref, _results;
      _ref = this.todo;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        thing = _ref[_i];
        _results.push(thing());
      }
      return _results;
    };

    return objClock;

  })();

  objLine = (function() {
    function objLine(_at_v1, _at_v2) {
      this.v1 = _at_v1;
      this.v2 = _at_v2;
      this.fg_gfx = new PIXI.Graphics();
      this.bg_gfx = new PIXI.Graphics();
      return;
    }

    objLine.prototype.reDraw = function() {
      this.fg_gfx.clear();
      this.bg_gfx.clear();
      this.fg_gfx.lineStyle(5, 0x000000, 1);
      this.bg_gfx.lineStyle(10, 0xffffff, 1);
      this.fg_gfx.moveTo(this.v1.x2, this.v1.y2);
      this.bg_gfx.moveTo(this.v1.x2, this.v1.y2);
      this.fg_gfx.lineTo(this.v2.x2, this.v2.y2);
      this.bg_gfx.lineTo(this.v2.x2, this.v2.y2);
    };

    return objLine;

  })();

  objCircle = (function() {
    function objCircle(_at_v, aType) {
      var tR;
      this.v = _at_v;
      tR = 14;
      if (aType === 0) {
        tR = 10.2;
      }
      this.fg_gfx = new PIXI.Graphics();
      this.bg_gfx = new PIXI.Graphics();
      this.fg_gfx.beginFill(0x000000, 1);
      this.bg_gfx.beginFill(0xffffff, 1);
      this.fg_gfx.drawCircle(0, 0, tR);
      this.bg_gfx.drawCircle(0, 0, tR + 2.5);
      this.fg_gfx.endFill();
      this.bg_gfx.endFill();
      return;
    }

    objCircle.prototype.reDraw = function() {
      this.fg_gfx.x = this.v.x2;
      this.fg_gfx.y = this.v.y2;
      this.bg_gfx.x = this.v.x2;
      this.bg_gfx.y = this.v.y2;
    };

    return objCircle;

  })();

  objCaffeine = (function() {
    function objCaffeine(_at_renderer, _at_stage) {
      var n, tC, tCords, tLines, tTypes, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3;
      this.renderer = _at_renderer;
      this.stage = _at_stage;
      this.doit = __bind(this.doit, this);
      this.update = __bind(this.update, this);
      this.time = 0;
      this.mesh = new objMesh();
      this.xform = new objTransform();
      this.xTra = 0;
      this.yTra = 0;
      this.zTra = this.mesh.z_projection / 2;
      this.xRot = 0;
      this.yRot = 0;
      this.zRot = 0;
      this.verts = [];
      this.gfx = [];
      tCords = [[-50.78, 0, 0], [-30.78, 0, 0], [-19.02, -16.18, 0], [-19.02, 16.18, 0], [0, -10, 0], [0, 10, 0], [17.32, -40, 0], [17.32, -20, 0], [17.32, 20, 0], [17.32, 20, 0], [34.64, -10, 0], [34.64, 10, 0], [49.96, -20, 0], [49.96, 20, 0], [-35.11, 44.12, -3.85], [-25.20, 35.20, 0], [-28.77, 46.18, 7.7], [-22.43, 48.24, -3.85], [10.65, -51.55, -3.85], [17.32, -51.55, 7.7], [23.99, -51.55, -3.85], [61.51, 20, 7.7], [59.96, 25.77, -3.85], [55.47, 30, 7.7]];
      tTypes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0];
      tLines = [[0, 1], [1, 2], [2, 4], [3, 1], [4, 7], [4, 5], [5, 3], [6, 7], [7, 10], [8, 5], [9, 8], [10, 11], [11, 8], [12, 10], [13, 11], [14, 15], [15, 3], [16, 15], [17, 15], [18, 6], [19, 6], [20, 6], [21, 13], [22, 13], [23, 13]];
      for (n = _i = 0, _ref = tCords.length; _i < _ref; n = _i += 1) {
        tC = tCords[n];
        this.verts.push(this.mesh.add_vertex(tC[0], tC[1], tC[2]));
      }
      for (n = _j = 0, _ref1 = this.verts.length; _j < _ref1; n = _j += 1) {
        this.gfx.push(new objCircle(this.verts[n], tTypes[n]));
        this.stage.addChild(this.gfx[n].bg_gfx);
      }
      for (n = _k = 0, _ref2 = tLines.length; _k < _ref2; n = _k += 1) {
        this.gfx.push(new objLine(this.verts[tLines[n][0]], this.verts[tLines[n][1]]));
        this.stage.addChild(this.gfx[this.gfx.length - 1].bg_gfx);
        this.stage.addChild(this.gfx[this.gfx.length - 1].fg_gfx);
      }
      for (n = _l = 0, _ref3 = this.verts.length; _l < _ref3; n = _l += 1) {
        this.stage.addChild(this.gfx[n].fg_gfx);
      }
      this.xform.translate(this.xTra, this.yTra, this.zTra);
      this.xform.rotate(this.xRot, this.yRot, this.zRot);
      return;
    }

    objCaffeine.prototype.update = function(aTime) {
      var n, tDelta, _i, _ref;
      tDelta = aTime - this.time;
      this.time = aTime;
      n = 0.0013194689145077132 * tDelta;
      if (this.xRot < -Math.PI) {
        this.xRot += 2 * Math.PI;
      }
      if (this.xRot > Math.PI) {
        this.xRot -= 2 * Math.PI;
      }
      this.yRot -= n;
      if (this.yRot < -Math.PI) {
        this.yRot += 2 * Math.PI;
      }
      if (this.yRot > Math.PI) {
        this.yRot -= 2 * Math.PI;
      }
      this.zRot -= n / 2;
      if (this.zRot < -Math.PI) {
        this.zRot += 2 * Math.PI;
      }
      if (this.zRot > Math.PI) {
        this.zRot -= 2 * Math.PI;
      }
      this.xform.translate(this.xTra, this.yTra, this.zTra);
      this.xform.rotate(this.xRot, this.yRot, this.zRot);
      this.mesh.update(this.xform);
      for (n = _i = 0, _ref = this.gfx.length; _i < _ref; n = _i += 1) {
        this.gfx[n].reDraw();
      }
      this.renderer.render(this.stage);
    };

    objCaffeine.prototype.doit = function() {
      var n, _i, _ref;
      n = (2 * Math.PI) / 100;
      if (this.xRot < -Math.PI) {
        this.xRot += 2 * Math.PI;
      }
      if (this.xRot > Math.PI) {
        this.xRot -= 2 * Math.PI;
      }
      this.yRot -= n;
      if (this.yRot < -Math.PI) {
        this.yRot += 2 * Math.PI;
      }
      if (this.yRot > Math.PI) {
        this.yRot -= 2 * Math.PI;
      }
      this.zRot -= n / 2;
      if (this.zRot < -Math.PI) {
        this.zRot += 2 * Math.PI;
      }
      if (this.zRot > Math.PI) {
        this.zRot -= 2 * Math.PI;
      }
      this.xform.translate(this.xTra, this.yTra, this.zTra);
      this.xform.rotate(this.xRot, this.yRot, this.zRot);
      this.mesh.update(this.xform);
      for (n = _i = 0, _ref = this.gfx.length; _i < _ref; n = _i += 1) {
        this.gfx[n].reDraw();
      }
      this.renderer.render(this.stage);
    };

    return objCaffeine;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.objCaffeine = objCaffeine;

  //root.objClock = objClock;

  //stats = new Stats();
  //stats.setMode(0);
  //stats.domElement.style.position = 'absolute';
  //stats.domElement.style.left = '0px';
  //stats.domElement.style.top = '0px';
  //document.body.appendChild(stats.domElement);
  //cl = new objClock();




  var Load_Hero = function() {
    var insertAfter = function(newNode, referenceNode) {
      referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
    };

    var fixHero = function() {
      var hight, img, mwidth, width;
      img = document.getElementById("hero_img");
      width = img.offsetWidth;
      hight = img.offsetHeight;
      mwidth = (width * 400) / 1000;
      img.style.marginTop = "" + (mwidth - hight) / 2 + "px";
      img.style.marginLeft = "-" + width / 2 + "px";
      img = document.getElementById("hero_stage");
      img.style.marginLeft = "-" + mwidth / 2 + "px";

      renderer.resize(mwidth,mwidth);
      var ratio = (mwidth/2) / 150
      stage.x = mwidth/2;
      stage.y = stage.x * 0.9;
      stage.scale.x = ratio
      stage.scale.y = ratio
    }

    var el_head = document.getElementById("header_main");
    var el_img = document.createElement('img');
    el_img.setAttribute('id', 'hero_img');
    el_img.src = "/img/header_ca_logo.png";
    el_img.setAttribute('style', "position:absolute;margin-top:135px;left:50%;margin-left:-500px;max-width:90%");
    el_img.addEventListener('load', function() { fixHero(); }, false);
    insertAfter(el_img, el_head);

    var el_div = document.createElement('div');
    el_div.setAttribute('id', 'hero_stage');
    el_div.setAttribute('style', "position:absolute;left:50%;margin-left:-200px;");
    insertAfter(el_div, el_head);

    renderer = PIXI.autoDetectRenderer(300, 300, {
      //backgroundColor: 0x999999,
      transparent: true,
      antialias: true
    });
    el_div.appendChild(renderer.view);
    stage = new PIXI.Container();
    stage.x = 150;
    stage.y = 150;
    renderer.render(stage);
    ca = new objCaffeine(renderer, stage);
    animate = function(t) {
      ca.update(t);
      requestAnimationFrame(animate);
    };
    requestAnimationFrame(animate);

    fixHero();
    window.onresize = function() {
      fixHero();
    };
  }

  document.addEventListener("DOMContentLoaded", function(e){
      Load_Hero();
  });

}).call(this);
